#include <WiFi.h>
#include <PubSubClient.h>
#include <Credentials/Credentials.h>
#include <ArduinoJson.h>    //https://github.com/bblanchon/ArduinoJson


const int DONE_PIN = 13;
bool wifiConnected = false;
bool sensorReadingOk = true;


//----------------------------------Forex---------------------------------------------
//https://1forge.com/forex-data-api/api-documentation
char* usd_to_pln = "http://forex.1forge.com/1.0.3/convert?from=USD&to=PLN&quantity=1&api_key=C0PpsLfvczArzUfXOZdK7pkrskTmRP0q";
char* eur_to_usd = "http://forex.1forge.com/1.0.3/convert?from=USD&to=PLN&quantity=1&api_key=C0PpsLfvczArzUfXOZdK7pkrskTmRP0q";
#include <HTTPClient.h>
#include <TimeLib.h>
HTTPClient http;




//--------------------------------Open weather map---------------------------------------------------
char* servername = "api.openweathermap.org";
String CityID = "706448";
String APIKEY = "85caa036010dce285793ea9a1a494fea";
const int numberOfForcasts = 4;
float temp_arr[numberOfForcasts];
String icon[numberOfForcasts];
String forcast_time[numberOfForcasts];
int icon_x[4] = { 10, 10 + 60 + 10, 10 + 60 + 10 + 60 + 10, 10 + 60 + 10 + 60 + 10 + 60 + 10};
int icon_y = 3;
int icon_size = 60;

const unsigned char gImage_01[480] = { /* 0X00,0X01,0X3C,0X00,0X3C,0X00, */
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X06,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X06,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X06,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X06,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X06,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X06,0X00,0X00,0X00,0X00,0X00,0X03,0X00,0X00,0X00,0X0C,0X00,0X00,
	0X00,0X07,0X80,0X00,0X00,0X1E,0X00,0X00,0X00,0X03,0XC0,0X00,0X00,0X3C,0X00,0X00,
	0X00,0X01,0XC0,0X00,0X00,0X38,0X00,0X00,0X00,0X00,0XC0,0X7F,0XE0,0X30,0X00,0X00,
	0X00,0X00,0X01,0XFF,0XF8,0X00,0X00,0X00,0X00,0X00,0X03,0XFF,0XFC,0X00,0X00,0X00,
	0X00,0X00,0X07,0XFF,0XFE,0X00,0X00,0X00,0X00,0X00,0X0F,0XFF,0XFF,0X00,0X00,0X00,
	0X00,0X00,0X1F,0XFF,0XFF,0X80,0X00,0X00,0X00,0X00,0X3F,0XFF,0XFF,0XC0,0X00,0X00,
	0X00,0X00,0X3F,0XFF,0XFF,0XC0,0X00,0X00,0X00,0X00,0X7F,0XFF,0XFF,0XE0,0X00,0X00,
	0X00,0X00,0X7F,0XFF,0XFF,0XE0,0X00,0X00,0X00,0X00,0X7F,0XFF,0XFF,0XE0,0X00,0X00,
	0X00,0XF0,0X7F,0XFF,0XFF,0XE0,0XF0,0X00,0X01,0XF8,0X7F,0XFF,0XFF,0XE1,0XF8,0X00,
	0X01,0XF8,0X7F,0XFF,0XFF,0XE1,0XF8,0X00,0X00,0X00,0X7F,0XFF,0XFF,0XE0,0X00,0X00,
	0X00,0X00,0X7F,0XFF,0XFF,0XE0,0X00,0X00,0X00,0X00,0X7F,0XFF,0XFF,0XE0,0X00,0X00,
	0X00,0X00,0X3F,0XFF,0XFF,0XC0,0X00,0X00,0X00,0X00,0X3F,0XFF,0XFF,0XC0,0X00,0X00,
	0X00,0X00,0X1F,0XFF,0XFF,0X80,0X00,0X00,0X00,0X00,0X1F,0XFF,0XFF,0X80,0X00,0X00,
	0X00,0X00,0X0F,0XFF,0XFF,0X00,0X00,0X00,0X00,0X00,0X07,0XFF,0XFE,0X00,0X00,0X00,
	0X00,0X00,0X03,0XFF,0XFC,0X00,0X00,0X00,0X00,0X00,0X00,0XFF,0XF0,0X00,0X00,0X00,
	0X00,0X01,0XC0,0X1F,0X80,0X38,0X00,0X00,0X00,0X03,0XC0,0X00,0X00,0X3C,0X00,0X00,
	0X00,0X07,0X80,0X00,0X00,0X1E,0X00,0X00,0X00,0X07,0X00,0X00,0X00,0X0E,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X06,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X06,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X06,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X06,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X06,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X06,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
};

const unsigned char gImage_02[480] = { /* 0X00,0X01,0X3C,0X00,0X3C,0X00, */
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X03,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X03,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X03,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X1C,0X00,0X00,0X60,0X00,0X00,0X00,
	0X00,0X0E,0X00,0X00,0XE0,0X00,0X00,0X00,0X00,0X06,0X00,0X01,0XC0,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X07,0XC0,0X00,0X00,0X00,0X00,
	0X00,0X00,0X1F,0XF0,0X00,0X00,0X00,0X00,0X00,0X00,0X3F,0XF8,0X00,0X00,0X00,0X00,
	0X00,0X00,0X7F,0XF8,0X7F,0X80,0X00,0X00,0X00,0X00,0X7F,0XF8,0XFF,0XE0,0X00,0X00,
	0X00,0X00,0XFF,0XF3,0XFF,0XF0,0X00,0X00,0X00,0XC0,0XFF,0XE7,0XFF,0XF8,0X00,0X00,
	0X01,0XE0,0XFF,0XC7,0XFF,0XF8,0X00,0X00,0X00,0XC0,0XFF,0XCF,0XFF,0XFC,0X00,0X00,
	0X00,0X00,0XFF,0XCF,0XFF,0XFC,0X00,0X00,0X00,0X00,0X7C,0X0F,0XFF,0XFE,0X00,0X00,
	0X00,0X00,0X70,0X1F,0XFF,0XFE,0X00,0X00,0X00,0X00,0X21,0XFF,0XFF,0XFF,0X80,0X00,
	0X00,0X00,0X07,0XFF,0XFF,0XFF,0XE0,0X00,0X00,0X00,0X0F,0XFF,0XFF,0XFF,0XF0,0X00,
	0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XF0,0X00,0X00,0X06,0X1F,0XFF,0XFF,0XFF,0XF8,0X00,
	0X00,0X0E,0X1F,0XFF,0XFF,0XFF,0XF8,0X00,0X00,0X1C,0X1F,0XFF,0XFF,0XFF,0XF8,0X00,
	0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XF8,0X00,0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XF8,0X00,
	0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XF8,0X00,0X00,0X00,0X0F,0XFF,0XFF,0XFF,0XF0,0X00,
	0X00,0X00,0X0F,0XFF,0XFF,0XFF,0XE0,0X00,0X00,0X00,0X07,0XFF,0XFF,0XFF,0XC0,0X00,
	0X00,0X00,0X01,0XFF,0XFF,0XFF,0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
};

const unsigned char gImage_03[480] = { /* 0X00,0X01,0X3C,0X00,0X3C,0X00, */
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X07,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X3F,0XF8,0X00,0X00,0X00,
	0X00,0X00,0X00,0XFF,0XFC,0X00,0X00,0X00,0X00,0X00,0X01,0XFF,0XFE,0X00,0X00,0X00,
	0X00,0X00,0X03,0XFF,0XFF,0X00,0X00,0X00,0X00,0X00,0X03,0XFF,0XFF,0X80,0X00,0X00,
	0X00,0X00,0X07,0XFF,0XFF,0XC0,0X00,0X00,0X00,0X00,0X07,0XFF,0XFF,0XC0,0X00,0X00,
	0X00,0X00,0X0F,0XFF,0XFF,0XC0,0X00,0X00,0X00,0X00,0X3F,0XFF,0XFF,0XE0,0X00,0X00,
	0X00,0X00,0XFF,0XFF,0XFF,0XF8,0X00,0X00,0X00,0X03,0XFF,0XFF,0XFF,0XFC,0X00,0X00,
	0X00,0X07,0XFF,0XFF,0XFF,0XFE,0X00,0X00,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0X00,0X00,
	0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0X80,0X00,
	0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0X80,0X00,
	0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0X80,0X00,
	0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0X80,0X00,
	0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0X00,0X00,
	0X00,0X07,0XFF,0XFF,0XFF,0XFE,0X00,0X00,0X00,0X03,0XFF,0XFF,0XFF,0XFC,0X00,0X00,
	0X00,0X00,0XFF,0XFF,0XFF,0XF8,0X00,0X00,0X00,0X00,0X3F,0XFF,0XFF,0XC0,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
};

const unsigned char gImage_04[480] = { /* 0X00,0X01,0X3C,0X00,0X3C,0X00, */
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X0F,0XF0,0X00,0X00,
	0X00,0X00,0X00,0X00,0X1F,0XF8,0X00,0X00,0X00,0X00,0X00,0X00,0X3F,0XFC,0X00,0X00,
	0X00,0X00,0X00,0X00,0X7F,0XFE,0X00,0X00,0X00,0X00,0X00,0X00,0XFF,0XFF,0X00,0X00,
	0X00,0X00,0X00,0X1F,0XFF,0XFF,0X00,0X00,0X00,0X00,0X1E,0X1F,0XFF,0XFF,0XC0,0X00,
	0X00,0X00,0X7F,0XCF,0XFF,0XFF,0XF8,0X00,0X00,0X01,0XFF,0XE7,0XFF,0XFF,0XFC,0X00,
	0X00,0X03,0XFF,0XF3,0XFF,0XFF,0XFE,0X00,0X00,0X03,0XFF,0XFB,0XFF,0XFF,0XFF,0X00,
	0X00,0X7F,0XFF,0XF8,0XFF,0XFF,0XFF,0X00,0X01,0XFF,0XFF,0XF8,0X1F,0XFF,0XFF,0X00,
	0X03,0XFF,0XFF,0XFF,0X8F,0XFF,0XFF,0X00,0X07,0XFF,0XFF,0XFF,0XE7,0XFF,0XFF,0X00,
	0X07,0XFF,0XFF,0XFF,0XF3,0XFF,0XFE,0X00,0X0F,0XFF,0XFF,0XFF,0XF3,0XFF,0XFE,0X00,
	0X0F,0XFF,0XFF,0XFF,0XFB,0XFF,0XFC,0X00,0X0F,0XFF,0XFF,0XFF,0XFB,0XFF,0XF0,0X00,
	0X0F,0XFF,0XFF,0XFF,0XF8,0X00,0X00,0X00,0X07,0XFF,0XFF,0XFF,0XF8,0X00,0X00,0X00,
	0X07,0XFF,0XFF,0XFF,0XF0,0X00,0X00,0X00,0X03,0XFF,0XFF,0XFF,0XF0,0X00,0X00,0X00,
	0X03,0XFF,0XFF,0XFF,0XE0,0X00,0X00,0X00,0X00,0XFF,0XFF,0XFF,0XC0,0X00,0X00,0X00,
	0X00,0X3F,0XFF,0XFF,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
};

const unsigned char gImage_09[480] = { /* 0X00,0X01,0X3C,0X00,0X3C,0X00, */
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X07,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X3F,0XF8,0X00,0X00,0X00,
	0X00,0X00,0X00,0XFF,0XFC,0X00,0X00,0X00,0X00,0X00,0X01,0XFF,0XFE,0X00,0X00,0X00,
	0X00,0X00,0X03,0XFF,0XFF,0X00,0X00,0X00,0X00,0X00,0X03,0XFF,0XFF,0X80,0X00,0X00,
	0X00,0X00,0X07,0XFF,0XFF,0XC0,0X00,0X00,0X00,0X00,0X07,0XFF,0XFF,0XC0,0X00,0X00,
	0X00,0X00,0X0F,0XFF,0XFF,0XC0,0X00,0X00,0X00,0X00,0X3F,0XFF,0XFF,0XE0,0X00,0X00,
	0X00,0X00,0XFF,0XFF,0XFF,0XF0,0X00,0X00,0X00,0X03,0XFF,0XFF,0XFF,0XFC,0X00,0X00,
	0X00,0X07,0XFF,0XFF,0XFF,0XFE,0X00,0X00,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0X00,0X00,
	0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0X80,0X00,
	0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0X80,0X00,
	0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0X80,0X00,
	0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0X80,0X00,
	0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0X00,0X00,
	0X00,0X07,0XFF,0XFF,0XFF,0XFE,0X00,0X00,0X00,0X03,0XFF,0XFF,0XFF,0XFC,0X00,0X00,
	0X00,0X01,0XFF,0XFF,0XFF,0XF8,0X00,0X00,0X00,0X00,0X3F,0XFF,0XFF,0XE0,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X06,0X06,0X03,0X00,0X00,0X00,0X00,0X00,0X0E,0X06,0X07,0X00,0X00,0X00,
	0X00,0X00,0X0C,0X0C,0X06,0X00,0X00,0X00,0X00,0X00,0X18,0X1C,0X0C,0X00,0X00,0X00,
	0X00,0X00,0X18,0X18,0X0C,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
};

const unsigned char gImage_10[480] = { /* 0X00,0X01,0X3C,0X00,0X3C,0X00, */
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X07,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X3F,0XF8,0X00,0X00,0X00,
	0X00,0X00,0X00,0XFF,0XFC,0X00,0X00,0X00,0X00,0X00,0X01,0XFF,0XFE,0X00,0X00,0X00,
	0X00,0X00,0X03,0XFF,0XFF,0X00,0X00,0X00,0X00,0X00,0X03,0XFF,0XFF,0X80,0X00,0X00,
	0X00,0X00,0X07,0XFF,0XFF,0XC0,0X00,0X00,0X00,0X00,0X07,0XFF,0XFF,0XC0,0X00,0X00,
	0X00,0X00,0X0F,0XFF,0XFF,0XC0,0X00,0X00,0X00,0X00,0X3F,0XFF,0XFF,0XE0,0X00,0X00,
	0X00,0X00,0XFF,0XFF,0XFF,0XF0,0X00,0X00,0X00,0X03,0XFF,0XFF,0XFF,0XFC,0X00,0X00,
	0X00,0X07,0XFF,0XFF,0XFF,0XFE,0X00,0X00,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0X00,0X00,
	0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0X80,0X00,
	0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0X80,0X00,
	0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0X80,0X00,
	0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0X80,0X00,
	0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0X00,0X00,
	0X00,0X07,0XFF,0XFF,0XFF,0XFE,0X00,0X00,0X00,0X03,0XFF,0XFF,0XFF,0XFC,0X00,0X00,
	0X00,0X01,0XFF,0XFF,0XFF,0XF8,0X00,0X00,0X00,0X00,0X3F,0XFF,0XFF,0XE0,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X06,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X06,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X0C,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X1C,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X18,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
};

const unsigned char gImage_11[480] = { /* 0X00,0X01,0X3C,0X00,0X3C,0X00, */
	0X00,0X00,0X01,0XFC,0X00,0X00,0X00,0X00,0X00,0X00,0X0F,0XFF,0X80,0X00,0X00,0X00,
	0X00,0X00,0X1F,0XFF,0XC0,0X00,0X00,0X00,0X00,0X00,0X7F,0XFF,0XF0,0X00,0X00,0X00,
	0X00,0X00,0XFF,0XFF,0XF8,0X00,0X00,0X00,0X00,0X01,0XFF,0XFF,0XFC,0X00,0X00,0X00,
	0X00,0X01,0XFF,0XFF,0XFC,0X00,0X00,0X00,0X00,0X03,0XFF,0XFF,0XFF,0XE0,0X00,0X00,
	0X00,0X03,0XFF,0XFF,0XFF,0XF8,0X00,0X00,0X00,0X07,0XFF,0XFF,0XFF,0XFE,0X00,0X00,
	0X00,0X07,0XFF,0XFF,0XFF,0XFE,0X00,0X00,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0X00,0X00,
	0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X00,
	0X01,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X00,
	0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X00,0X03,0XFF,0XFF,0X80,0X03,0XFF,0XF8,0X00,
	0X03,0XFF,0XFF,0X00,0X01,0XFF,0XF8,0X00,0X03,0XFF,0XFF,0X00,0X00,0XFF,0XFC,0X00,
	0X03,0XFF,0XFE,0X1F,0XE1,0XFF,0XFC,0X00,0X03,0XFF,0XFE,0X3F,0XE1,0XFF,0XFC,0X00,
	0X03,0XFF,0XFC,0X3F,0XE3,0XFF,0XFC,0X00,0X01,0XFF,0XFC,0X3F,0XE3,0XFF,0XFC,0X00,
	0X01,0XFF,0XFC,0X7F,0XC7,0XFF,0XFC,0X00,0X00,0XFF,0XF8,0X7F,0XC7,0XFF,0XF8,0X00,
	0X00,0X3F,0XF8,0X7F,0X87,0XFF,0XF0,0X00,0X00,0X0F,0XF8,0XFF,0X8F,0XFF,0XC0,0X00,
	0X00,0X00,0X00,0XFF,0X80,0X00,0X00,0X00,0X00,0X00,0X01,0XFF,0X00,0X00,0X00,0X00,
	0X00,0X00,0X01,0XFF,0X08,0X00,0X00,0X00,0X00,0X03,0X01,0XFF,0XFE,0X06,0X00,0X00,
	0X00,0X03,0X83,0XFF,0XFE,0X0F,0X00,0X00,0X00,0X07,0X83,0XFF,0XFC,0X0F,0X00,0X00,
	0X00,0X07,0X87,0XFF,0XF8,0X1E,0X00,0X00,0X00,0X0F,0X07,0XFF,0XF8,0X1E,0X00,0X00,
	0X00,0X0F,0X07,0XFF,0XF0,0X3C,0X00,0X00,0X00,0X1E,0X0F,0XFF,0XE0,0X3C,0X00,0X00,
	0X00,0X1E,0X07,0XFF,0XC0,0X38,0X00,0X00,0X00,0X04,0X00,0XFF,0XC0,0X08,0X00,0X00,
	0X00,0X00,0X00,0XFF,0X80,0X00,0X00,0X00,0X00,0X00,0X00,0XFF,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0XFE,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0XFE,0X00,0X00,0X00,0X00,
	0X00,0X00,0X01,0XFC,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0XF8,0X00,0X00,0X00,0X00,
	0X00,0X00,0X01,0XF0,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0XF0,0X00,0X00,0X00,0X00,
	0X00,0X00,0X03,0XE0,0X00,0X00,0X00,0X00,0X00,0X00,0X03,0XC0,0X00,0X00,0X00,0X00,
	0X00,0X00,0X03,0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
};

const unsigned char gImage_13[480] = { /* 0X00,0X01,0X3C,0X00,0X3C,0X00, */
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0XF8,0X00,0X00,0X00,
	0X00,0X00,0X00,0X07,0XFC,0X00,0X00,0X00,0X00,0X00,0X00,0X0F,0XFE,0X00,0X00,0X00,
	0X00,0X00,0X00,0X1F,0XFF,0X00,0X00,0X00,0X00,0X00,0X07,0XFF,0XFF,0X80,0X00,0X00,
	0X00,0X00,0X1F,0XFF,0XFF,0X80,0X00,0X00,0X00,0X00,0X3F,0XFF,0XFF,0X80,0X00,0X00,
	0X00,0X01,0XFF,0XFF,0XFF,0XF8,0X00,0X00,0X00,0X07,0XFF,0XFF,0XFF,0XFE,0X00,0X00,
	0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0X00,0X00,
	0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0X80,0X00,
	0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0X80,0X00,
	0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0X00,0X00,
	0X00,0X07,0XFF,0XFF,0XFF,0XFE,0X00,0X00,0X00,0X01,0XFF,0XFF,0XFF,0XF8,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X1C,0X00,0X03,0X80,0X00,0X00,
	0X00,0X00,0X1C,0X00,0X03,0X80,0X00,0X00,0X00,0X00,0X1C,0X00,0X03,0X80,0X00,0X00,
	0X00,0X03,0X1C,0X60,0X63,0X8C,0X00,0X00,0X00,0X03,0XDF,0XE0,0X7F,0XBC,0X00,0X00,
	0X00,0X07,0XFF,0XF0,0XFF,0XFE,0X00,0X00,0X00,0X03,0XFF,0XF0,0XFF,0XFC,0X00,0X00,
	0X00,0X00,0XFF,0XC0,0X3F,0XF0,0X00,0X00,0X00,0X00,0XFF,0X80,0X1F,0XF0,0X00,0X00,
	0X00,0X03,0XFF,0XF0,0XFF,0XFC,0X00,0X00,0X00,0X07,0XFF,0XF0,0XFF,0XFE,0X00,0X00,
	0X00,0X03,0XDF,0XE0,0X7F,0XBC,0X00,0X00,0X00,0X03,0X1C,0X60,0X63,0X8C,0X00,0X00,
	0X00,0X00,0X1C,0X00,0X03,0X80,0X00,0X00,0X00,0X00,0X1C,0X00,0X03,0X80,0X00,0X00,
	0X00,0X00,0X1C,0X00,0X03,0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
};

const unsigned char gImage_50[480] = { /* 0X00,0X01,0X3C,0X00,0X3C,0X00, */
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0XFF,0X80,0X00,0X00,0X00,
	0X00,0X00,0X03,0XFF,0XE0,0X00,0X00,0X00,0X00,0X00,0X07,0XFF,0XF0,0X00,0X00,0X00,
	0X00,0X00,0X1F,0XFF,0XF8,0X00,0X00,0X00,0X00,0X00,0X3F,0XFF,0XFC,0X00,0X00,0X00,
	0X00,0X00,0X3F,0XFF,0XFE,0X00,0X00,0X00,0X00,0X00,0X7F,0XFF,0XFF,0X00,0X00,0X00,
	0X00,0X00,0X7F,0XFF,0XFF,0X00,0X00,0X00,0X00,0X00,0XFF,0XFF,0XFF,0X80,0X00,0X00,
	0X00,0X00,0XFF,0XFF,0XFF,0XC0,0X00,0X00,0X00,0X00,0XFF,0XFF,0XFF,0XF8,0X00,0X00,
	0X00,0X00,0XFF,0XFF,0XFF,0XFE,0X00,0X00,0X00,0X01,0XFF,0XFF,0XFF,0XFF,0X00,0X00,
	0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0X80,0X00,
	0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0X80,0X00,
	0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0X80,0X00,
	0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0X80,0X00,
	0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0X00,0X00,
	0X00,0X1F,0XFF,0XFF,0XFF,0XFE,0X00,0X00,0X00,0X0F,0XFF,0XFF,0XFF,0XF8,0X00,0X00,
	0X00,0X01,0XFF,0XFF,0XFF,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0XFF,0XFF,0XFF,0XF0,0X00,0X00,0X00,0X00,0XFF,0XFF,0XFF,0XF0,0X00,0X00,
	0X00,0X00,0XFF,0XFF,0XFF,0XF0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0XFF,0XFF,0XFF,0XF0,0X00,0X00,
	0X00,0X00,0XFF,0XFF,0XFF,0XF0,0X00,0X00,0X00,0X00,0XFF,0XFF,0XFF,0XF0,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X7F,0XFF,0XFF,0XE0,0X00,0X00,
	0X00,0X00,0XFF,0XFF,0XFF,0XF0,0X00,0X00,0X00,0X00,0XFF,0XFF,0XFF,0XF0,0X00,0X00,
	0X00,0X00,0X7F,0XFF,0XFF,0XE0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
};

const unsigned char gImage_temp[] = {
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X60,0X00,0X00,0X00,
	0X0F,0XFE,0X00,0X00,0X00,0X3F,0XFF,0X80,0X00,0X00,0XFF,0XFF,0XE0,0X00,0X01,0XFF,
	0XFF,0XF0,0X00,0X03,0XFF,0XFF,0XF8,0X00,0X07,0XFF,0XFF,0XFC,0X00,0X07,0XFF,0XFF,
	0XFE,0X00,0X0F,0XFF,0XFF,0XFE,0X00,0X1F,0XFF,0XFF,0XFF,0X00,0X1F,0XF3,0XFF,0XFF,
	0X00,0X1F,0XE1,0XF0,0X7F,0X80,0X3F,0XCD,0XC0,0X7F,0X80,0X3F,0XCC,0X87,0XFF,0X80,
	0X3F,0XE1,0X8F,0XFF,0X80,0X3F,0XF3,0X1F,0XFF,0X80,0X3F,0XFF,0X1F,0XFF,0X80,0X3F,
	0XFF,0X1F,0XFF,0X80,0X3F,0XFF,0X1F,0XFF,0X80,0X3F,0XFF,0X8F,0XFF,0X80,0X3F,0XFF,
	0X87,0X7F,0X80,0X1F,0XFF,0XC0,0X7F,0X80,0X1F,0XFF,0XF0,0X7F,0X00,0X1F,0XFF,0XFF,
	0XFF,0X00,0X0F,0XFF,0XFF,0XFE,0X00,0X07,0XFF,0XFF,0XFE,0X00,0X07,0XFF,0XFF,0XFC,
	0X00,0X03,0XFF,0XFF,0XF8,0X00,0X01,0XFF,0XFF,0XF0,0X00,0X00,0XFF,0XFF,0XE0,0X00,
	0X00,0X3F,0XFF,0X80,0X00,0X00,0X0F,0XFE,0X00,0X00,0X00,0X00,0XE0,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00, };


//-------------------------------NTP---------------------------------------------------
#include <NTPClient.h>
#include <WiFiUdp.h>
#include <time.h>    // Built-in

WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP);
String time_str;

//--------------------------------WIFI----------------------------------------------------
WiFiClient espClient;

//--------------------------------MQTT----------------------------------------------------
PubSubClient client(espClient);

//--------------------------------E-Paper----------------------------------------------------

#include <GxEPD.h>
#include <GxGDEW029Z10/GxGDEW029Z10.h>    // 2.9" b/w/r 128/296 vertical

// FreeFonts from Adafruit_GFX
#include <Fonts/FreeSans18pt7b.h>
#include <Fonts/FreeSansBold9pt7b.h>
#include <Fonts/FreeSans9pt7b.h>
#include <Fonts/FreeMonoBold9pt7b.h>
#include <GxIO/GxIO_SPI/GxIO_SPI.h>
#include <GxIO/GxIO.h>

// for SPI pin definitions see e.g.:
// C:\Users\xxx\Documents\Arduino\hardware\espressif\esp32\variants\lolin32\pins_arduino.h
GxIO_Class io(SPI, /*CS=5*/ SS, /*DC=*/ 17, /*RST=*/ 16); // arbitrary selection of 17, 16
GxEPD_Class display(io, /*RST=*/ 16, /*BUSY=*/ 4); // arbitrary selection of (16), 4  i have used 14 instead 4 ***128/296


//--------------------------------Sensor----------------------------------------------------

#include <SparkFunHTU21D.h>
HTU21D sensor;
float humd = 0.00;
float temp = 0.00;
String humidity = "0.00";
String temperature = "0.00";

void setup()
{
	Serial.begin(115200);
	pinMode(DONE_PIN, OUTPUT);
	digitalWrite(DONE_PIN, LOW);
	//battery_voltage = ReadVoltage(36) * voltage_devider_ratio;
	getSensorData();
	if (sensorReadingOk)
	{
		startWiFi();
		if (wifiConnected)
		{
			startTime();
			delay(1000);
			connectToBroker();
			delay(1000);
			getWeatherData();
			getForexData();
		}
		stopWiFi();
		display.init(115200);
		drawDisplay();
	}
	digitalWrite(DONE_PIN, HIGH);
}

void loop()
{

}

void getSensorData() {
	sensor.begin();
	sensor.setResolution(0b10000001);
	humd = sensor.readHumidity();
	temp = sensor.readTemperature();
	if (temp > 50 || humd > 100)
	{
		delay(500);
		temp = sensor.readTemperature();
		humd = sensor.readHumidity();
	}
	if (temp > 50 || humd > 100)
	{
		sensorReadingOk = false;
	}
	else
	{
		humidity = String(humd, 1);
		temperature = String(temp, 1);
		sensorReadingOk = true;
	}
}

//Connection to MQTT broker
void connectToBroker() {
	client.setServer(SERVER_IP, MQTT_SERVER_PORT);
	if (client.connect("ESP32_E_Paper_Screen")) {
		client.publish("ESP32_E_Paper_Screen/temperature", temperature.c_str());
		delay(1000);
		client.publish("ESP32_E_Paper_Screen/humidity", humidity.c_str());
	}
}


void drawDisplay()
{
	display.setRotation(1);
	display.fillScreen(GxEPD_WHITE);
	display.setTextColor(GxEPD_BLACK);
	display.fillRect(0, 108, 296, 2, GxEPD_RED);
	display.setFont(&FreeSans18pt7b);
	display.setCursor(20, 102);
	display.print(temperature);
	display.setCursor(170, 102);
	display.print(humidity);
	display.setTextColor(GxEPD_RED);
	display.setFont(&FreeSans18pt7b);
	display.setCursor(115, 102);
	//display.print("C");
	display.drawBitmap(gImage_temp, 95, 72, 40, 40, GxEPD_RED);
	display.setCursor(240, 102);
	display.print("%");
	for (size_t i = 0; i < numberOfForcasts; i++)
	{
		showWeatherIcon(icon[i], i);
		printTime(forcast_time[i], i);
		printTemp(String(temp_arr[i], 1), i);
	}
	display.setTextColor(GxEPD_BLACK);
	display.setFont(&FreeSansBold9pt7b);
	display.setCursor(0, 126);
	display.print(time_str);
	display.update();
}


double ReadVoltage(byte pin) {
	double reading = analogRead(pin); // Reference voltage is 3v3 so maximum reading is 3v3 = 4095 in range 0 to 4095
	if (reading < 1 || reading > 4095) return 0;
	// return -0.000000000009824 * pow(reading,3) + 0.000000016557283 * pow(reading,2) + 0.000854596860691 * reading + 0.065440348345433;
	return -0.000000000000016 * pow(reading, 4) + 0.000000000118171 * pow(reading, 3) - 0.000000301211691 * pow(reading, 2) + 0.001109019271794 * reading + 0.034143524634089;
}


void startTime() {
	configTime(2 * 3600, 0, "0.uk.pool.ntp.org", "time.nist.gov"); // long gmtOffset_sec, int daylightOffset_sec (летнее иди зимнее время)
	UpdateLocalTime();
}


void UpdateLocalTime() {
	struct tm timeinfo;
	while (!getLocalTime(&timeinfo)) {
		Serial.println("Failed to obtain time");
	}
	//See http://www.cplusplus.com/reference/ctime/strftime/
	Serial.println(&timeinfo, "%a %b %d %Y   %H:%M:%S"); // Displays: Saturday, June 24 2017 14:05:49
	char output[50];
	strftime(output, 50, "%a %d-%b-%y  (%H:%M:%S)", &timeinfo);
	time_str = output;
}


void startWiFi() {
	int connStarttSec = 0;
	Serial.print(F("\r\nConnecting to: ")); Serial.println(String(SSID));
	WiFi.disconnect();
	WiFi.mode(WIFI_STA);
	WiFi.begin(SSID, PASSWORD);
	while (WiFi.status() != WL_CONNECTED) {
		delay(1000); Serial.print(".");
		if (connStarttSec > 5) {
			WiFi.disconnect();
			Serial.println("Cant connect WiFi :(");
			wifiConnected = false;
			return;
		}
		connStarttSec++;
	}
	Serial.println("WiFi connected");
	wifiConnected = true;
}


void stopWiFi() {
	WiFi.disconnect();
	WiFi.mode(WIFI_OFF);
	wifiConnected = false;
}


String getForexRate(char* requestString) {
	String payload = "";
	http.begin(requestString);
	int httpCode = http.GET();
	if (httpCode > 0) { //Check for the returning code

		payload = http.getString();
		Serial.println(httpCode);
		Serial.println(payload);
	}

	else {
		Serial.println("Error on HTTP request");
	}
	http.end();
	return payload;
}

void parseForexJson(String payload) {
	StaticJsonBuffer<1024> json_buf;
	JsonObject &root = json_buf.parseObject(payload);
	if (!root.success())
	{
		Serial.println("parseObject() failed");
	}

	String value = root["value"];
	String text = root["text"];
	unsigned long timestamp = root["timestamp"];
	Serial.println(value);
	Serial.println(text);
	time_t t = timestamp;
	char buff[32];
	sprintf(buff, "%02d.%02d.%02d %02d:%02d:%02d", day(t), month(t), year(t), hour(t), minute(t), second(t));
	Serial.println(buff);
}

void getForexData() //client function to send/receive GET request data.
{
	parseForexJson(getForexRate(usd_to_pln));
	parseForexJson(getForexRate(eur_to_usd));
}

void getWeatherData() //client function to send/receive GET request data.
{
	String result = "";
	const int httpPort = 80;
	if (!espClient.connect(servername, httpPort)) {
		return;
	}
	// We now create a URI for the request
	String url = "/data/2.5/forecast?id=" + CityID + "&units=metric&cnt=" + numberOfForcasts + "&APPID=" + APIKEY;

	// This will send the request to the server
	espClient.print(String("GET ") + url + " HTTP/1.1\r\n" +
		"Host: " + servername + "\r\n" +
		"Connection: close\r\n\r\n");
	unsigned long timeout = millis();
	while (espClient.available() == 0) {
		if (millis() - timeout > 5000) {
			espClient.stop();
			return;
		}
	}

	// Read all the lines of the reply from server
	while (espClient.available()) {
		result = espClient.readStringUntil('\r');
	}

	DynamicJsonBuffer json_buf(5000);
	JsonObject &root = json_buf.parseObject(result);
	if (!root.success())
	{
		Serial.println("parseObject() failed");
	}
	else {
		for (size_t i = 0; i < numberOfForcasts; i++)
		{
			icon[i] = root["list"][i]["weather"][0]["icon"].as<String>();
			temp_arr[i] = root["list"][i]["main"]["temp"].as<float>();
			String time_full = root["list"][i]["dt_txt"].as<String>();
			Serial.println(time_full);
			Serial.println(time_full.substring(11, 13));
			forcast_time[i] = time_full.substring(11, 13);
		}
	}
	Serial.println("________________________________________________");
	Serial.println(result);
	Serial.println("________________________________________________");
}


void showWeatherIcon(String icon, int pos) {

	display.fillRect(icon_x[pos] - 1, icon_y - 1, icon_size + 9, icon_size + 10, GxEPD_RED);
	display.fillRect(icon_x[pos], icon_y, icon_size + 7, icon_size + 8, GxEPD_WHITE);
	//display.fillRect(icon_x[pos], icon_y + icon_size, icon_size + 7, 8, GxEPD_WHITE);

	if (icon.startsWith("01")) // clear sky
	{
		display.drawBitmap(gImage_01, icon_x[pos], icon_y, icon_size, icon_size, GxEPD_BLACK);
	}
	if (icon.startsWith("02"))
	{
		display.drawBitmap(gImage_02, icon_x[pos], icon_y, icon_size, icon_size, GxEPD_BLACK);
	}
	if (icon.startsWith("03"))
	{
		display.drawBitmap(gImage_03, icon_x[pos], icon_y, icon_size, icon_size, GxEPD_BLACK);
	}
	if (icon.startsWith("04"))
	{
		display.drawBitmap(gImage_04, icon_x[pos], icon_y, icon_size, icon_size, GxEPD_BLACK);
	}
	if (icon.startsWith("09"))
	{
		display.drawBitmap(gImage_09, icon_x[pos], icon_y, icon_size, icon_size, GxEPD_BLACK);
	}
	if (icon.startsWith("10"))
	{
		display.drawBitmap(gImage_10, icon_x[pos], icon_y, icon_size, icon_size, GxEPD_BLACK);
	}
	if (icon.startsWith("11"))
	{
		display.drawBitmap(gImage_11, icon_x[pos], icon_y, icon_size, icon_size, GxEPD_BLACK);
	}
	if (icon.startsWith("13"))
	{
		display.drawBitmap(gImage_13, icon_x[pos], icon_y, icon_size, icon_size, GxEPD_BLACK);
	}
	if (icon.startsWith("50"))
	{
		display.drawBitmap(gImage_50, icon_x[pos], icon_y, icon_size, icon_size, GxEPD_BLACK);
	}
}

void printTime(String time, int pos) {

	display.setTextColor(GxEPD_RED);
	display.setFont(&FreeSansBold9pt7b);
	display.setCursor(icon_x[pos] + 45, icon_y + 14);
	display.print(time);
}

void printTemp(String temp, int pos) {
	display.setTextColor(GxEPD_BLACK);
	display.setFont(&FreeSansBold9pt7b);
	int dotPosition = temp.indexOf('.');
	int offset = 20;
	if (dotPosition == 2)
	{
		offset = 10;
	}
	if (dotPosition == 3)
	{
		offset = 3;
	}
	display.setCursor(icon_x[pos] + offset, icon_y + icon_size + 3);
	display.print(temp);
}