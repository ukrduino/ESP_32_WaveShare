#include <WiFi.h>
#include <PubSubClient.h>
#include <Credentials/Credentials.h>


const int DONE_PIN = 13;
double battery_voltage = 0.0;
double voltage_devider_ratio = 2.2106;
bool wifiConnected = false;
bool sensorReadingOk = true;

const unsigned char gImage_01[] = {
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X18,0X00,0X00,0X00,0X00,0X18,0X00,0X00,0X00,
	0X00,0X18,0X00,0X00,0X00,0X00,0X18,0X00,0X00,0X00,0X00,0X18,0X00,0X00,0X06,0X00,
	0X00,0X00,0XC0,0X07,0X00,0X00,0X01,0XC0,0X03,0X80,0X00,0X03,0X80,0X01,0XC0,0X00,
	0X07,0X00,0X00,0XC0,0X7E,0X04,0X00,0X00,0X01,0XFF,0X80,0X00,0X00,0X03,0XFF,0XC0,
	0X00,0X00,0X07,0XFF,0XE0,0X00,0X00,0X0F,0XFF,0XF0,0X00,0X00,0X1F,0XFF,0XF8,0X00,
	0X00,0X1F,0XFF,0XF8,0X00,0X00,0X1F,0XFF,0XF8,0X00,0X7C,0X3F,0XFF,0XFC,0X7C,0XFE,
	0X3F,0XFF,0XFC,0XFE,0X00,0X3F,0XFF,0XFC,0X00,0X00,0X1F,0XFF,0XF8,0X00,0X00,0X1F,
	0XFF,0XF8,0X00,0X00,0X1F,0XFF,0XF8,0X00,0X00,0X0F,0XFF,0XF0,0X00,0X00,0X07,0XFF,
	0XE0,0X00,0X00,0X03,0XFF,0XC0,0X00,0X00,0X41,0XFF,0X82,0X00,0X00,0XE0,0X3C,0X07,
	0X00,0X01,0XC0,0X00,0X03,0X80,0X03,0X80,0X00,0X01,0XC0,0X07,0X00,0X00,0X00,0XE0,
	0X02,0X00,0X10,0X00,0X40,0X00,0X00,0X30,0X00,0X00,0X00,0X00,0X30,0X00,0X00,0X00,
	0X00,0X30,0X00,0X00,0X00,0X00,0X30,0X00,0X00,0X00,0X00,0X30,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00, };

const unsigned char gImage_temp[] = {
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X60,0X00,0X00,0X00,
0X0F,0XFE,0X00,0X00,0X00,0X3F,0XFF,0X80,0X00,0X00,0XFF,0XFF,0XE0,0X00,0X01,0XFF,
0XFF,0XF0,0X00,0X03,0XFF,0XFF,0XF8,0X00,0X07,0XFF,0XFF,0XFC,0X00,0X07,0XFF,0XFF,
0XFE,0X00,0X0F,0XFF,0XFF,0XFE,0X00,0X1F,0XFF,0XFF,0XFF,0X00,0X1F,0XF3,0XFF,0XFF,
0X00,0X1F,0XE1,0XF0,0X7F,0X80,0X3F,0XCD,0XC0,0X7F,0X80,0X3F,0XCC,0X87,0XFF,0X80,
0X3F,0XE1,0X8F,0XFF,0X80,0X3F,0XF3,0X1F,0XFF,0X80,0X3F,0XFF,0X1F,0XFF,0X80,0X3F,
0XFF,0X1F,0XFF,0X80,0X3F,0XFF,0X1F,0XFF,0X80,0X3F,0XFF,0X8F,0XFF,0X80,0X3F,0XFF,
0X87,0X7F,0X80,0X1F,0XFF,0XC0,0X7F,0X80,0X1F,0XFF,0XF0,0X7F,0X00,0X1F,0XFF,0XFF,
0XFF,0X00,0X0F,0XFF,0XFF,0XFE,0X00,0X07,0XFF,0XFF,0XFE,0X00,0X07,0XFF,0XFF,0XFC,
0X00,0X03,0XFF,0XFF,0XF8,0X00,0X01,0XFF,0XFF,0XF0,0X00,0X00,0XFF,0XFF,0XE0,0X00,
0X00,0X3F,0XFF,0X80,0X00,0X00,0X0F,0XFE,0X00,0X00,0X00,0X00,0XE0,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00, };

const unsigned char gImage_50[] = {
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X07,0XF8,0X00,0X00,0X00,0X1F,0XFE,0X00,0X00,0X00,0X3F,0XFF,0X80,0X00,0X00,0XFF,
	0X3F,0XC0,0X00,0X01,0XF8,0X07,0XE0,0X00,0X01,0XE0,0X01,0XFC,0X00,0X03,0XC0,0X00,
	0XFF,0X00,0X03,0XC0,0X00,0X7F,0X80,0X07,0X80,0X00,0X0F,0XC0,0X07,0X80,0X00,0X03,
	0XC0,0X07,0X00,0X00,0X01,0XE0,0X07,0X00,0X00,0X01,0XE0,0X1F,0X00,0X00,0X00,0XE0,
	0X3F,0X00,0X00,0X00,0XF0,0X7E,0X00,0X00,0X00,0XF8,0X78,0X00,0X00,0X00,0XFC,0X70,
	0X00,0X00,0X00,0X7E,0XF0,0X00,0X00,0X00,0X1E,0XF0,0X00,0X00,0X00,0X0F,0XF0,0X07,
	0XFF,0XF0,0X0F,0XF0,0X07,0XFF,0XF0,0X0F,0XF0,0X07,0XFF,0XF0,0X0F,0X78,0X00,0X00,
	0X00,0X0F,0X7C,0X00,0X00,0X00,0X1E,0X3F,0X00,0X00,0X00,0X7E,0X1F,0XC7,0XFF,0XF1,
	0XFC,0X0F,0XE7,0XFF,0XF1,0XF8,0X07,0XC7,0XFF,0XF1,0XE0,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X07,0XFF,0XF0,0X00,0X00,
	0X07,0XFF,0XF0,0X00,0X00,0X07,0XFF,0XF0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00, };

const unsigned char gImage_13[] = {
	0X00,0X00,0X18,0X00,0X00,0X00,0X00,0X7E,0X00,0X00,0X00,0X00,0X7E,0X00,0X00,0X00,
	0X00,0X7E,0X00,0X00,0X00,0X03,0X99,0XC0,0X00,0X00,0X03,0XDB,0XC0,0X00,0X00,0X01,
	0XFF,0X80,0X00,0X00,0X40,0X7E,0X02,0X00,0X04,0XC0,0X3C,0X03,0X20,0X1E,0XE0,0X99,
	0X07,0X78,0X3E,0XE0,0XFF,0X07,0X7C,0X1F,0XE4,0XFF,0X27,0XF8,0X1F,0XEE,0X18,0X77,
	0XF8,0X1B,0XFC,0X18,0X3F,0XD8,0X03,0XFC,0X3C,0X3F,0XC0,0X0F,0XFE,0X7E,0X7F,0XF0,
	0X0F,0X3F,0XFF,0XFC,0XF0,0X08,0X77,0XC3,0XEE,0X10,0X00,0X73,0X81,0XCE,0X00,0X00,
	0X03,0X81,0XC0,0X00,0X00,0X03,0X81,0XC0,0X00,0X00,0X73,0X81,0XCE,0X00,0X08,0X77,
	0XC3,0XEE,0X10,0X0F,0X3F,0XFF,0XFC,0XF0,0X0F,0XFE,0X7E,0X7F,0XF0,0X03,0XFC,0X3C,
	0X3F,0XC0,0X1B,0XFC,0X18,0X3F,0XD8,0X1F,0XEE,0X18,0X77,0XF8,0X1F,0XE4,0XFF,0X27,
	0XF8,0X3E,0XE0,0XFF,0X07,0X7C,0X1E,0XE0,0X99,0X07,0X78,0X04,0XC0,0X3C,0X03,0X20,
	0X00,0X40,0X7E,0X02,0X00,0X00,0X01,0XFF,0X80,0X00,0X00,0X03,0XDB,0XC0,0X00,0X00,
	0X03,0X99,0XC0,0X00,0X00,0X00,0X7E,0X00,0X00,0X00,0X00,0X7E,0X00,0X00,0X00,0X00,
	0X7E,0X00,0X00,0X00,0X00,0X18,0X00,0X00, };

const unsigned char gImage_11[] = {
	0X00,0X00,0XFE,0X00,0X00,0X00,0X07,0XFF,0X80,0X00,0X00,0X1F,0XFF,0XE0,0X00,0X00,
	0X3F,0XFF,0XF0,0X00,0X00,0X7F,0XFF,0XF8,0X00,0X00,0XFF,0XFF,0XFC,0X00,0X00,0XFF,
	0XFF,0XFC,0X00,0X01,0XFF,0XFF,0XFE,0X00,0X01,0XFF,0XFF,0XFF,0XE0,0X01,0XFF,0XFF,
	0XFF,0XF0,0X03,0XFF,0XFF,0XFF,0XF8,0X03,0XFF,0XFF,0XFF,0XFC,0X0F,0XFF,0XFF,0XFF,
	0XFE,0X1F,0XFF,0XFF,0XFF,0XFE,0X3F,0XFC,0X00,0X3F,0XFF,0X7F,0XF8,0X00,0X7F,0XFF,
	0X7F,0XF9,0XFC,0X7F,0XFF,0XFF,0XF9,0XFC,0XFF,0XFF,0XFF,0XFB,0XF9,0XFF,0XFF,0XFF,
	0XF3,0XF3,0XFF,0XFE,0XFF,0XF3,0XE3,0XFF,0XFE,0X7F,0XF3,0XE0,0X07,0XFE,0X7F,0XE7,
	0XC0,0X0F,0XFC,0X3F,0XE7,0XFF,0X9F,0XF8,0X1F,0XE7,0XFF,0X3F,0XF0,0X07,0XE7,0XFE,
	0X7F,0XC0,0X00,0X00,0X1C,0X00,0X00,0X00,0X00,0X38,0X00,0X00,0X00,0X00,0X30,0X00,
	0X00,0X00,0X00,0X30,0X00,0X00,0X00,0X00,0X60,0X00,0X00,0X00,0X00,0X40,0X00,0X00,
	0X00,0X00,0X00,0X00,0X00, };

const unsigned char gImage_10[] = {
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X01,0XF0,0XFC,0X00,0X00,0X03,0XFF,0XFF,0X00,0X00,0X07,
0XFF,0XFF,0X80,0X00,0X0F,0XFF,0XFF,0XC0,0X00,0X1F,0XFF,0XFF,0XE0,0X03,0XFF,0XFF,
0XFF,0XF0,0X07,0XFF,0XFF,0XFF,0XF0,0X0F,0XFF,0XFF,0XFF,0XF0,0X1F,0XFF,0XFF,0XFF,
0XF8,0X1F,0XFF,0XFF,0XFF,0XF8,0X3F,0XFF,0XFF,0XFF,0XF8,0X3F,0XFF,0XFF,0XFF,0XF0,
0X3F,0XFF,0XFF,0XFF,0XF0,0X1F,0XFF,0XFF,0XFF,0XF0,0X1F,0XFF,0XFF,0XFF,0XE0,0X1F,
0XFF,0XFF,0XFF,0XE0,0X0F,0XFF,0XFF,0XFF,0XC0,0X03,0XFF,0XFF,0XFF,0X80,0X00,0X47,
0XFF,0XFE,0X00,0X00,0X07,0XFF,0X80,0X00,0X00,0X03,0XFF,0X00,0X00,0X00,0X01,0XFC,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X20,0X00,
0X00,0X00,0X00,0X30,0X00,0X00,0X00,0X00,0X70,0X00,0X00,0X00,0X00,0X78,0X00,0X00,
0X00,0X00,0X30,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00, };

const unsigned char gImage_09[] = {
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X01,0XF8,0XFC,0X00,0X00,0X07,0XFF,0XFF,0X80,0X00,0X0F,0XFF,0XFF,0XC0,0X00,0X1F,
0XFF,0XFF,0XE0,0X00,0XDF,0XFF,0XFF,0XE0,0X07,0XFF,0XFF,0XFF,0XF0,0X0F,0XFF,0XFF,
0XFF,0XF0,0X1F,0XFF,0XFF,0XFF,0XF8,0X3F,0XFF,0XFF,0XFF,0XF8,0X3F,0XFF,0XFF,0XFF,
0XF8,0X3F,0XFF,0XFF,0XFF,0XF8,0X3F,0XFF,0XFF,0XFF,0XF8,0X3F,0XFF,0XFF,0XFF,0XF0,
0X3F,0XFF,0XFF,0XFF,0XF0,0X1F,0XFF,0XFF,0XFF,0XE0,0X1F,0XFF,0XFF,0XFF,0XE0,0X0F,
0XFF,0XFF,0XFF,0XC0,0X07,0XFF,0XFF,0XFF,0X80,0X00,0X0F,0XFF,0XFE,0X00,0X00,0X07,
0XFF,0X00,0X00,0X00,0X03,0XFE,0X00,0X00,0X00,0X00,0XFC,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X60,0X00,0X00,0X00,0X00,0X60,0X00,0X00,0X00,0X00,0XF0,0X00,0X00,
0X00,0X00,0XF0,0X00,0X40,0X00,0X00,0X00,0X00,0XC0,0X00,0X00,0X00,0X41,0XE0,0X00,
0X00,0X00,0X61,0XE0,0X00,0X00,0X00,0XE0,0XC0,0X00,0X00,0X00,0XE0,0X00,0X00,0X00,
0X00,0X60,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00, };

const unsigned char gImage_04[] = {
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X07,
0X83,0X80,0X00,0X00,0X1F,0XFF,0XE0,0X00,0X00,0X7F,0XFF,0XF0,0X00,0X00,0X7F,0XFF,
0XF8,0X00,0X00,0XFF,0XFF,0XF9,0X80,0X00,0XFF,0XFF,0XFF,0XE0,0X01,0XF0,0X38,0X1F,
0XF0,0X01,0XE7,0X87,0XC7,0XF8,0X01,0XDF,0XFF,0XF3,0XF8,0X01,0XBF,0XFF,0XF9,0XF8,
0X00,0X3F,0XFF,0XFC,0XF8,0X07,0X3F,0XFF,0XFE,0XF8,0X1F,0XFF,0XFF,0XFE,0XF8,0X3F,
0XFF,0XFF,0XFE,0X70,0X3F,0XFF,0XFF,0XFF,0X40,0X7F,0XFF,0XFF,0XFE,0X00,0X7F,0XFF,
0XFF,0XFE,0X00,0X7F,0XFF,0XFF,0XFE,0X00,0X3F,0XFF,0XFF,0XFE,0X00,0X3F,0XFF,0XFF,
0XFC,0X00,0X1F,0XFF,0XFF,0XF8,0X00,0X0F,0X9F,0XFF,0XF0,0X00,0X00,0X1F,0XFF,0XC0,
0X00,0X00,0X0F,0XF0,0X00,0X00,0X00,0X07,0XE0,0X00,0X00,0X00,0X01,0X80,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00, };

const unsigned char gImage_03[] = {
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X03,0XF9,
0XFC,0X00,0X00,0X07,0XFF,0XFF,0X00,0X00,0X0F,0XFF,0XFF,0X80,0X00,0X1F,0XFF,0XFF,
0XC0,0X01,0XFF,0XFF,0XFF,0XE0,0X07,0XFF,0XFF,0XFF,0XE0,0X0F,0XFF,0XFF,0XFF,0XE0,
0X1F,0XFF,0XFF,0XFF,0XF0,0X1F,0XFF,0XFF,0XFF,0XF0,0X1F,0XFF,0XFF,0XFF,0XF0,0X3F,
0XFF,0XFF,0XFF,0XF0,0X3F,0XFF,0XFF,0XFF,0XF0,0X1F,0XFF,0XFF,0XFF,0XE0,0X1F,0XFF,
0XFF,0XFF,0XE0,0X1F,0XFF,0XFF,0XFF,0XC0,0X0F,0XFF,0XFF,0XFF,0XC0,0X07,0XFF,0XFF,
0XFF,0X80,0X01,0XFF,0XFF,0XFE,0X00,0X00,0X07,0XFF,0XF8,0X00,0X00,0X07,0XFF,0X00,
0X00,0X00,0X01,0XFE,0X00,0X00,0X00,0X00,0X78,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00, };

const unsigned char gImage_02[] = {
0X00,0X00,0X00,0X00,0X00,0X00,0X02,0X00,0X00,0X00,0X00,0X02,0X00,0X00,0X00,0X00,
0X02,0X00,0X00,0X00,0X00,0X02,0X00,0X00,0X00,0X0C,0X00,0X03,0X00,0X00,0X06,0X00,
0X06,0X00,0X00,0X02,0X07,0X0C,0X00,0X00,0X00,0X1F,0XC0,0X00,0X00,0X00,0X60,0X60,
0X00,0X00,0X00,0X40,0X30,0X00,0X00,0X00,0XC0,0XF8,0X7E,0X00,0X00,0X83,0XFF,0XFF,
0XC0,0X78,0X87,0XFF,0XFF,0XE0,0X00,0X8F,0XFF,0XFF,0XF0,0X00,0X8F,0XFF,0XFF,0XF8,
0X03,0XFF,0XFF,0XFF,0XF8,0X0F,0XFF,0XFF,0XFF,0XFC,0X1F,0XFF,0XFF,0XFF,0XFC,0X1F,
0XFF,0XFF,0XFF,0XFC,0X3F,0XFF,0XFF,0XFF,0XFC,0X3F,0XFF,0XFF,0XFF,0XFC,0X3F,0XFF,
0XFF,0XFF,0XFC,0X3F,0XFF,0XFF,0XFF,0XFC,0X3F,0XFF,0XFF,0XFF,0XFC,0X3F,0XFF,0XFF,
0XFF,0XF8,0X1F,0XFF,0XFF,0XFF,0XF8,0X1F,0XFF,0XFF,0XFF,0XF0,0X0F,0XFF,0XFF,0XFF,
0XE0,0X03,0XFF,0XFF,0XFF,0XC0,0X00,0X07,0XFF,0XFF,0X00,0X00,0X03,0XFF,0X80,0X00,
0X00,0X01,0XFF,0X80,0X00,0X00,0X00,0XFE,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00, };
//-------------------------------NTP---------------------------------------------------
#include <NTPClient.h>
#include <WiFiUdp.h>
#include <time.h>    // Built-in

WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP);
String time_str, current_hour, current_minute, current_day, current_month, current_year;

//--------------------------------WIFI----------------------------------------------------
WiFiClient espClient;

//--------------------------------MQTT----------------------------------------------------
PubSubClient client(espClient);

//--------------------------------E-Paper----------------------------------------------------

#include <GxEPD.h>
#include <GxGDEW029Z10/GxGDEW029Z10.h>    // 2.9" b/w/r 128/296 vertical

// FreeFonts from Adafruit_GFX
#include <Fonts/FreeSans24pt7b.h>
#include <Fonts/FreeSans18pt7b.h>
#include <Fonts/FreeSansBold9pt7b.h>

#include <GxIO/GxIO_SPI/GxIO_SPI.h>
#include <GxIO/GxIO.h>

// for SPI pin definitions see e.g.:
// C:\Users\xxx\Documents\Arduino\hardware\espressif\esp32\variants\lolin32\pins_arduino.h
GxIO_Class io(SPI, /*CS=5*/ SS, /*DC=*/ 17, /*RST=*/ 16); // arbitrary selection of 17, 16
GxEPD_Class display(io, /*RST=*/ 16, /*BUSY=*/ 4); // arbitrary selection of (16), 4  i have used 14 instead 4 ***128/296


//--------------------------------Sensor----------------------------------------------------

#include <SparkFunHTU21D.h>
HTU21D sensor;
float humd = 0.00;
float temp = 0.00;
String humidity = "0.00";
String temperature = "0.00";

void setup()
{
	Serial.begin(115200);
	pinMode(DONE_PIN, OUTPUT);
	digitalWrite(DONE_PIN, LOW);
	//battery_voltage = ReadVoltage(36) * voltage_devider_ratio;
	getSensorData();
	if (sensorReadingOk)
	{
		startWiFi();
		if (wifiConnected)
		{
			startTime();
			delay(1000);
			connectToBroker();
			delay(1000);
		}
		stopWiFi();
		display.init(115200);
		drawDisplay();
	}
	digitalWrite(DONE_PIN, HIGH);
}

void loop()
{

}

void getSensorData() {
	sensor.begin();
	sensor.setResolution(0b10000001);
	humd = sensor.readHumidity();
	temp = sensor.readTemperature();
	if (temp > 50 || humd > 100)
	{
		delay(500);
		temp = sensor.readTemperature();
		humd = sensor.readHumidity();
	}
	if (temp > 50 || humd > 100)
	{
		sensorReadingOk = false;
	}
	else
	{
		humidity = String(humd, 1);
		temperature = String(temp, 1);
		sensorReadingOk = true;
	}
}

//Connection to MQTT broker
void connectToBroker() {
	client.setServer(SERVER_IP, MQTT_SERVER_PORT);
	if (client.connect("ESP32_E_Paper_Screen")) {
		client.publish("ESP32_E_Paper_Screen/temperature", temperature.c_str());
		delay(1000);
		client.publish("ESP32_E_Paper_Screen/humidity", humidity.c_str());
	}
}


void drawDisplay()
{
	display.setRotation(1);
	display.fillScreen(GxEPD_WHITE);
	display.setTextColor(GxEPD_BLACK);
	display.drawBitmap(gImage_01, 5, 5, 40, 40, GxEPD_BLACK);
	display.drawBitmap(gImage_02, 45, 5, 40, 40, GxEPD_BLACK);
	display.drawBitmap(gImage_03, 85, 5, 40, 40, GxEPD_BLACK);
	display.drawBitmap(gImage_04, 125, 5, 40, 40, GxEPD_BLACK);
	display.drawBitmap(gImage_09, 165, 5, 40, 40, GxEPD_BLACK);
	display.drawBitmap(gImage_10, 205, 5, 40, 40, GxEPD_BLACK);
	display.drawBitmap(gImage_11, 245, 5, 40, 40, GxEPD_BLACK);
	display.drawBitmap(gImage_13, 5, 45, 40, 40, GxEPD_BLACK);
	display.drawBitmap(gImage_50, 45, 45, 40, 40, GxEPD_BLACK);

	display.fillRect(0, 108, 296, 2, GxEPD_RED);

	display.setFont(&FreeSans24pt7b);
	display.setCursor(20, 80);
	//display.print(temperature);
	display.setCursor(170, 80);
	display.print(humidity);
	display.setTextColor(GxEPD_RED);
	display.setFont(&FreeSans18pt7b);
	display.setCursor(115, 80);
	//display.print("C");
	display.drawBitmap(gImage_temp, 115, 45, 40, 40, GxEPD_RED);
	display.setCursor(260, 80);
	display.print("%");


	display.setTextColor(GxEPD_BLACK);
	display.setFont(&FreeSansBold9pt7b);
	display.setCursor(260, 126);
	display.print(battery_voltage);

	display.setCursor(0, 126);
	display.print(time_str);
	display.update();
}

double ReadVoltage(byte pin) {
	double reading = analogRead(pin); // Reference voltage is 3v3 so maximum reading is 3v3 = 4095 in range 0 to 4095
	if (reading < 1 || reading > 4095) return 0;
	// return -0.000000000009824 * pow(reading,3) + 0.000000016557283 * pow(reading,2) + 0.000854596860691 * reading + 0.065440348345433;
	return -0.000000000000016 * pow(reading, 4) + 0.000000000118171 * pow(reading, 3) - 0.000000301211691 * pow(reading, 2) + 0.001109019271794 * reading + 0.034143524634089;
}


void startTime() {
	configTime(2 * 3600, 0, "0.uk.pool.ntp.org", "time.nist.gov"); // long gmtOffset_sec, int daylightOffset_sec (летнее иди зимнее время)
	UpdateLocalTime();
}

void UpdateLocalTime() {
	struct tm timeinfo;
	while (!getLocalTime(&timeinfo)) {
		Serial.println("Failed to obtain time");
	}
	//See http://www.cplusplus.com/reference/ctime/strftime/
	Serial.println(&timeinfo, "%a %b %d %Y   %H:%M:%S"); // Displays: Saturday, June 24 2017 14:05:49
	char output[50];
	strftime(output, 50, "%a %d-%b-%y  (%H:%M:%S)", &timeinfo);
	time_str = output;
}


void startWiFi() {
	int connStarttSec = 0;
	Serial.print(F("\r\nConnecting to: ")); Serial.println(String(SSID));
	WiFi.disconnect();
	WiFi.mode(WIFI_STA);
	WiFi.begin(SSID, PASSWORD);
	while (WiFi.status() != WL_CONNECTED) {
		delay(1000); Serial.print(".");
		if (connStarttSec > 5) {
			WiFi.disconnect();
			Serial.println("Cant connect WiFi :(");
			wifiConnected = false;
			return;
		}
		connStarttSec++;
	}
	Serial.println("WiFi connected");
	wifiConnected = true;
}

void stopWiFi() {
	WiFi.disconnect();
	WiFi.mode(WIFI_OFF);
	wifiConnected = false;
}




